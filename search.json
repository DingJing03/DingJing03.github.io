[{"title":"Python学习笔记","url":"%2F2019%2F09%2F20%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F","content":"## 字符串\n\n大小写函数：title首字母大写，upper转大写，lower转小写，\n```\nname = \" ada lovelace \"\nprint(name.title() + \"title\")\nprint(name.upper() + \"upper\")\nprint(name.lower() + \"lower\")\n```\n```\n Ada Lovelace title\n ADA LOVELACE upper\n ada lovelace lower\n```\n去除空格：右rstrip，左lstrip，两端strip\n```\nprint(name.rstrip() + \"rstrip\")\nprint(name.lstrip() + \"lstrip\")\nprint(name.strip() + \"strip\")\n```\n```\n ada lovelacerstrip\nada lovelace lstrip\nada lovelacestrip\n```\n## 整数/浮点数\n\n加减乘除\n```\nprint(2 + 3)\nprint(3 - 2)\nprint(2 * 3)\nprint(3 / 2)\n```\n使用两个乘号表示乘方运算\n```\nprint(2 ** 3)\n```\n拼接字符串和数值时，使用str方法将数值转换成字符串，否则会报错\n```\nage = 23\nprint(\"Happy \" + str(age) + \"rd Birthday!\")\n```\n\n## 列表/数组/集合\n\n列表的定义用[]，索引为-1表示最后一个元素\n```\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\n\nprint(bicycles)\nprint(bicycles[0])\nprint(bicycles[-1])\n```\n```\n['trek', 'cannondale', 'redline', 'specialized']\ntrek\nspecialized\n```\n### 新增数组\n\n```\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\n#在末尾插入\nbicycles.append('ducati')\n#根据索引插入，后面的元素集体右移一位\nbicycles.insert(1, 'ads')\n```\n### 修改数组\n\n```\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\nbicycles[0] = 'treks'\n```\n### 删除数组\n\n```\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\n#根据索引删除\ndel bicycles[0]\n#根据值删除\nbicycles.remove('redline')\n#删除最后一位元素，并将值赋给前面的变量\npopped = bicycles.pop()\n#删除第二个元素，并将值赋给前面的变量\npopped = bicycles.pop(1)\n```\n### 数组排序\n\nsort根据字母顺序排序\n```\ncars = ['bmw', 'audi', 'toyota', 'subaru']\ncars.sort()\n```\nreverse=True表示倒序\n```\ncars.sort(reverse=True)\n```\nsorted临时排序，不影响数组的原始数据顺序，同样可以用reverse=True表示倒序\n```\ncars = ['bmw', 'audi', 'toyota', 'subaru']\n\nprint(\"Here is the sorted list:\")\nprint(sorted(cars))\nprint(\"\\nHere is the original list again:\")\nprint(cars)\n```\nreverse反转顺序\n```\ncars.reverse()\n```\nlen长度\n```\nlen(cars)\n```\n### 遍历数组\n\n在 for 循环后面，没有缩进的代码都只执行一次，而不会重复执行。Python根据缩进来判断代码行与前一个代码行的关系。\n```\nmagicians = ['alice', 'david', 'carolina']\n\nfor magician in magicians:\n    print(magician.title() + \", that was a great trick!\")\n    print(\"I can't wait to see your next trick, \" + magician.title() + \".\\n\")\nprint(\"Thank you, everyone. That was a great magic show!\")\n```\n### 创建数组\n\n函数range，下面代码好像应该打印数字1~5，但实际上它不会打印数字5。函数 range() 让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值\n```\nfor value in range(1,5):\n    print(value)\n```\n要创建数字列表，可使用函数 list() 将 range() 的结果直接转换为列表。\n```\nnumbers = list(range(1,6))\n```\n使用函数 range() 时，还可指定步长。例如，下面的代码打印1~10内的偶数：\n```\neven_numbers = list(range(2,11,2))\n```\n对数字列表执行简单的统计计算:找出数字列表的最大值、最小值和总和\n```\ndigits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nmin(digits)\nmax(digits)\nsum(digits)\n```\n### 列表解析\n\n使用列表解析创建平方数列表：\n```\nsquares = [value**2 for value in range(1,11)]\nprint(squares)\n```\n要使用这种语法，首先指定一个描述性的列表名，如 squares ；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为 `value**2 `，它计算平方值。接下来，编写一个 for 循环，用于给表达式提供值，再加上右方括号。在这个示例中，for 循环为 `for value in range(1,11)` ，它将值1~10提供给表达式 `value**2` 。请注意，这里的 for语句末尾没有冒号。\n```\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n### 切片\n\n冒号的开始索引和结束索引都可以为空，也可以是负数\n```\nsquares[1:5]\n```\n### 复制数组\n\n```\nmy_squares = squares[:]\n```\n### 元组\n\nPython将不可变的列表被称为元组。\n```\ndimensions = (200, 50)\nprint(dimensions[0])\n```\n","tags":["Python"],"categories":["后端"]},{"title":"jQuery提取页面表格数据导出excel","url":"%2F2019%2F09%2F16%2FJava-jQuery%E5%AF%BC%E5%87%BA%E9%A1%B5%E9%9D%A2%E8%A1%A8%E6%A0%BC%E5%88%B0excel%2F","content":"下面为获取html里面table数据的js方法。首先复制一份table，然后恢复合并的单元格，再循环元素拿数据，最后删除复制的table。\n```\nfunction getTableData(id) {\n\tvar tables = [];\n\t$(id).each(function(){\n\t\tvar tableClone = $(this).clone();\n\t\tvar table = {\n\t\t\tthead: [],\n\t\t\ttbody: []\n\t\t};\n\t\ttableClone.find(\"thead tr th\").each(function(){\n\t\t\ttable.thead.push($(this).text());\n\t\t});\n\t\ttableClone.find(\"tbody tr\").each(function(trindex,tritem){\n\t\t\t   $(tritem).find(\"td\").each(function(tdindex,tditem){\n\t\t\t\t\tvar Rcount=$(tditem).attr(\"rowspan\");\n\t\t\t\t\tvar Ccount=$(tditem).attr(\"colspan\");\n\t\t\t\t\tvar newtd=\"<td class='Ctd'>\"+$(tditem).text()+\"</td>\";\n\t\t\t\t\tif(Rcount>1){\n\t\t\t\t\t\tvar parent=$(tditem).parent(\"tr\")[0];\n\t\t\t\t\t\twhile(Rcount >1){\n\t\t\t\t\t\t\t$(parent).next().find(\"td\").eq(tdindex).before(newtd);\n\t\t\t\t\t\t\tparent=$(parent).next();\n\t\t\t\t\t\t\tRcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$(tditem).removeAttr(\"rowspan\");\n\t\t\t\t\t}\n\t\t\t\t\tif(Ccount>1){\n\t\t\t\t\t\twhile(Ccount>1){\n\t\t\t\t\t\t\t$(tditem).after(newtd);\n\t\t\t\t\t\t\tCcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$(tditem).removeAttr(\"colspan\");\n\t\t\t\t\t}\n\t\t\t  });\n\t\t});\n\t\ttableClone.find(\"tbody tr\").each(function(){\n\t\t\tvar datas = [];\n\t\t\t$(this).find(\"td\").each(function(){\n\t\t\t\tdatas.push($(this).text());\n\t\t\t});\n\t\t\ttable.tbody.push(datas);\n\t\t});\n\t\ttableClone.remove();\n\t\ttables.push(table);\n\t});\n\treturn tables;\n}\n```\n下面的js方法是通过在页面添加form来实现post类型的页面跳转。\n```\nfunction standardPost(url, args) {\n\tvar form = $('<form method=\"post\"></form>');\n\tform.attr({\"action\": url});\n\tfor (arg in args) {\n\t\tif ($.isPlainObject(args[arg])) {\n\t\t\tvar input = $('<input type=\"hidden\">');\n\t\t\tinput.attr({\"name\": arg});\n\t\t\tinput.val(JSON.stringify(args[arg]));\n\t\t\tform.append(input);\n\t\t} else if($.isArray(args[arg])) {\n\t\t\tfor (var i = 0; i < args[arg].length; i++) {\n\t\t\t\tvar input = $('<input type=\"hidden\">');\n\t\t\t\tinput.attr({\"name\": arg});\n\t\t\t\tif ($.isPlainObject(args[arg][i])) {\n\t\t\t\t\tconsole.log(JSON.stringify(args[arg][i]));\n\t\t\t\t\tinput.val(JSON.stringify(args[arg][i]));\n\t\t\t\t} else {\n\t\t\t\t\tinput.val(args[arg][i]);\n\t\t\t\t}\n\t\t\t\tform.append(input);\n\t\t\t}\n\t\t\tif (args[arg].length == 1) {\n\t\t\t\tvar input = $('<input type=\"hidden\">');\n\t\t\t\tinput.attr({\"name\": arg});\n\t\t\t\tinput.val(\"\");\n\t\t\t\tform.append(input);\n\t\t\t}\n\t\t} else {\n\t\t\tvar input = $('<input type=\"hidden\">');\n\t\t\tinput.attr({\"name\": arg});\n\t\t\tinput.val(args[arg]);\n\t\t\tform.append(input);\n\t\t}\n\t}\n\t$(document.body).append(form);\n\tform.submit();\n\tform.remove();\n} \n```\n使用实例：\n```\nexportExcel: function() {\n\tvar tables = getTableData(\".table\");\n\tvar params = {\n\t\t\texcelName: getMessage('messages.WeeklyReportMoisture'),\n\t\t\ttables: tables,\n\t\t\trows: [0],\n\t\t\tcols: []\n\t}\n\tstandardPost(qyb_config.rootPath+\"/admin/export_excel.html\",params);\n}\n```\n>方法中的rows、cols是用来对导出excel中有第几列或第几行需要合并单元格。","tags":["javascript"]},{"title":"Java语法备忘录","url":"%2F2019%2F08%2F29%2FJava%E8%AF%AD%E6%B3%95%E5%BD%92%E7%BA%B3%2F","content":"## 集合之间的转换\n### 数组转List\n```\nString[] array = new String[]{\"A\", \"B\", \"C\"};\nList<String> resultList = new ArrayList<>(array.length);\nCollections.addAll(resultList,array);\n```\n### 数组转Set\n```\nString[] staffs = new String[]{\"A\", \"B\", \"C\"};\nSet<String> staffsSet = new HashSet<>(Arrays.asList(staffs));\nstaffsSet.add(\"D\"); // ok\nstaffsSet.remove(\"Tom\"); // ok\n```\n### List转数组\n```\nList<String> staffsList = new ArrayList<String>();\nString[] strings = new String[staffsList.size()];\nlist.toArray(strings);\n```\n### List转Set\n```\nList staffsList = new ArrayList();\nSet result = new HashSet(staffsList);\n```\n### Set转数组\n```\nSet<String> staffsSet = new HashSet<>();\nObject[] result = staffsSet.toArray();\n```\n### Set转List\n```\nSet<String> staffsSet = new HashSet<>();\nList<String> result = new ArrayList<>(staffsSet);\n```\n### Map转List\n```\n// 将Map Key 转化为List      \nList<String> mapKeyList = new ArrayList<String>(map.keySet());    \n// 将Map Key 转化为List      \nList<String> mapValuesList = new ArrayList<String>(map.values());    \n```\n### Map转Set\n```\n// 将Map 的键转化为Set      \nSet<String> mapKeySet = map.keySet();    \n// 将Map 的值转化为Set      \nSet<String> mapValuesSet = new HashSet<String>(map.values());    \n```\n","tags":["Java"],"categories":["后端"]},{"title":"hexo+next搭建博客","url":"%2F2019%2F08%2F21%2Fhexo-next%E6%90%AD%E5%BB%BA%2F","content":"## 安装Git和NodeJS环境\n因为hexo需要依赖Git和NodeJs，所以需要先安装环境。\n```\nGit下载地址：https://git-scm.com/download/win\nNodeJS下载地址：https://nodejs.org/download/\n```\n\n## 安装hexo\n```\n#安装hexo服务\n$ npm install -g hexo-cli\n#初始化hexo\n$ hexo init <your-hexo-site>\n$ cd <your-hexo-site>\n$ npm install\n```\n其中<your-hexo-site>代表打算安装的本机地址\n\n## 配置和使用 GitHub\n### 配置用户\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。\n### 配置 SSH keys\n检查 SSH keys的设置\n```\n$ cd ~/.ssh 检查本机的ssh密钥\n```\n如果提示：No such file or directory 说明你是第一次使用 git。  \n生成新的 SSH Key：\n```\n$ ssh-keygen -t rsa -C \"邮箱地址\"\n```\n然后创建SSH,一路回车。  \n这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。\nssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n\n而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key\n把你的id_rsa.pub里面的信息复制进去。  \n在gitbash中，查看是否成功\n```\nssh -T git@github.com\n```\n### 将hexo部署到GitHub\n打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n```\nnpm install hexo-deployer-git --save\n```\n\n## 创建Tag页面(Categories，语法一样)\n```\n$ hexo new page \"tags\"\n```\n\n编辑刚新建的页面，将页面的类型设置为tags，主题将自动为这个页面显示标签云。页面内容如下：\n```\n---\ntitle: Tagcloud\ndate: 2017-06-22 12:39:04\ntype: \"tags\"\n---\n```\n\n注意：如果有启用多说 或者Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：\n```\n---\ntitle: Tagcloud\ndate: 2017-06-22 12:39:04\ntype: \"tags\"\ncomments: false\n---\n```\n\n## 增加站内搜索功能\n### 安装插件\n```\nnpm install hexo-generator-search\nnpm install hexo-generator-searchdb\n```\n### 修改hexo配置\n在你的hexo目录下的_config.yml中增加如下配置：\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n### 配置next中的搜索入口\n打开themes\\next\\_config.yml，打开local search:\n```\n# Local search\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n### travis-ci构建搜索模块\n如果你的博客是使用travis-ci自动进行构建的话，需要将上面提到的两个插件在.travis.yml中进行配置：\n```\n# S: Build Lifecycle\ninstall:\n  - npm install\n  - npm install hexo-generator-search\n  - npm install hexo-generator-searchdb\n```\n","tags":["hexo"],"categories":["前端"]},{"title":"Hexo常用指令","url":"%2F2019%2F08%2F20%2Fhello-world%2F","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n>+ 新建一篇题为“My New Post”的文章，此时会在E/Hexo/source/_posts/目录下生成一份My-New-Post.md 的文件，使用Notepad++、小书匠、MarkdownPad2等编辑工具打开即能书写；\n>+ 提示信息：INFO Created: E:\\Hexo\\source_posts\\My-New-Post.md\n>+ 如果标题包含空格，需要使用双引号括起来\n\n### 新建页面\n\n``` bash\n$ hexo new page pageName\n```\n>+ 新建一个题为“pageName”的页面，此时会在E:\\Hexo\\source\\目录下生成一个名为pageName的文件夹，其中包含一份 index 的md文件；\n>+ 提示信息：INFO Created: E:\\Hexo\\source\\pageName\\index.md\n>+ 同样地，如果语句中包含空格，需要使用双引号括起来\n\n### 生成静态页面\n``` bash\n$ hexo generate\n```\n>+ 启动该条指令后会将当前网页的内容生成静态页面到public目录下\n\n### 开启本地服务器端口\n``` bash\n$ hexo server\n```\n>+ 开启预览访问的端口，默认端口为4000\n>+ 关闭server使用 ctrl + c\n>+ 在使用hexo server 可能会遇到端口被占用的情况，不妨使用以下指令来更改端口\n``` bash\n$ hexo server -p 4001\n```\n\n### 部署到Github\n``` bash\n$ hexo deploy\n```\n>+ 将 E/Hexo/目录下的 .deploy_git 文件夹部署到Github\n>+ 部署前需要预先 hexo generate 生成静态文件\n\n### 清除文件\n``` bash\n$ hexo clean\n```\n>+ 清除E/Hexo目录下的缓存文件（db.json）和已经生成的静态文件（public）文件\n>+ 网页正常情况下可以忽略此条命令\n\n### 查看Hexo版本\n``` bash\n$ hexo version\n```\n\n### 简写形式\n``` bash\nhexo n #等价于 hexo new\nhexo g #等价于 hexo generate\nhexo s #等价于 hexo server\nhexo d #等价于 hexo deploy\nhexo v #等价于 hexo version\n```\n\n### 复合指令\n``` bash\nhexo g -d   \nhexo s -d \n```\n>+ hexo g -d # 等价于 hexo generate --deploy ：生成静态文件并部署\n>+ hexo s -d # 等价于 hexo deploy --generate ：开启预览并部署到Github\n","tags":["git"],"categories":["前端"]},{"title":"markdown 语法","url":"%2F2019%2F08%2F20%2Fmarkdown-%E8%AF%AD%E6%B3%95%2F","content":"## 标题\n代码：\n```\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n```\n效果：\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n\n## 字体效果\n代码：\n```\n**这是加粗的文字**\n*这是倾斜的文字*`\n***这是斜体加粗的文字***\n~~这是加删除线的文字~~\n```\n效果：\n\n**这是加粗的文字**\n\n*这是倾斜的文字*\n\n***这是斜体加粗的文字***\n\n~~这是加删除线的文字~~\n\n## 引用\n代码：\n```\n>这是引用的内容\n>>这是引用的内容\n```\n效果：\n>这是引用的内容\n>>这是引用的内容\n\n## 分割线\n代码：\n```\n---\n----\n***\n*****\n```\n\n效果：\n\n---\n----\n***\n*****\n\n## 图片\n语法：\n```\n![图片alt](图片地址 \"图片title\")\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n```\n\n## 超链接\n语法：\n```\n[超链接名](超链接地址 \"超链接title\")\ntitle可加可不加\n```\n示例：\n```\n[简书](http://jianshu.com)\n[百度](http://baidu.com)\n```\n效果：\n[简书](http://jianshu.com)  [百度](http://baidu.com)\n\n## 列表\n### 无序列表\n语法：\n```\n无序列表用 - + * 任何一种都可以\n- 列表内容\n+ 列表内容\n* 列表内容\n```\n>注意：- + * 跟内容之间都要有一个空格\n\n效果如下：\n- 列表内容\n+ 列表内容\n* 列表内容\n\n### 有序列表\n语法：\n```\n数字加点\n1.列表内容\n2.列表内容\n3.列表内容\n```\n>注意：序号跟内容之间要有空格\n\n效果：\n1.列表内容\n2.列表内容\n3.列表内容\n\n### 列表嵌套\n上一级和下一级之间敲三个空格或者一个Tap即可\n代码：\n```\n+ 一级无序列表内容\n\t+ 二级无序列表内容\n\t\t+ 二级无序列表内容\n\t\t\t+ 二级无序列表内容\n```\n效果：\n+ 一级无序列表内容\n\t+ 二级无序列表内容\n\t\t+ 三级无序列表内容\n\t\t\t+ 四级无序列表内容\n\n## 表格\n语法：\n```\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n第二行分割表头和内容。\n- 有一个就行，为了对齐，多加了几个\n文字默认居左\n-两边加：表示文字居中\n-右边加：表示文字居右\n注：原生的语法两边都要用 | 包起来。此处省略\n```\n效果：\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n九、代码\n语法：\n单行代码：代码之间分别用一个反引号包起来\n```\n`代码内容`\n```\n代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行\n```\n(```)\n  代码...\n  代码...\n  代码...\n(```)\n```\n>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。\n\n## 反斜杠\nMarkdown 支持在以下这些符号前面加上反斜杠来帮助插入普通的符号：\n```\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```","tags":["markdown"],"categories":["前端"]}]